PARSER_BEGIN(G1)
import java.util.ArrayList;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.List;
/** Simple brace matcher. */
public class G1 {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException, FileNotFoundException, UnsupportedEncodingException {
    G1 parser = new G1(System.in);
    parser.Configuration();
  }

}

PARSER_END(G1)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < #CHAR : ["!"-"~"] >
 |< #LETTER : ["a"-"z","A"-"Z","_"] >
 |< #DIGIT : ["0"-"9"] >
 |< INTEGER : (<DIGIT>)+ >
 |< PRIMARY : "primaire" >
 |< UNARY : "unaire" >
 |< BINARY : "binaire" >
 |< REGEX : "$" (<CHAR>)+ >
 |< STRING : "\"" (<CHAR>)* "\"" >
 |< ID : (<LETTER>)+ >
}

void Configuration() throws FileNotFoundException, UnsupportedEncodingException:
{
	Specification operator;	
	ArrayList<Specification> listOperators= new ArrayList<Specification>();
}
{
	( 
		operator = Declaration()
		{ listOperators.add(operator); }
 	)*
	<EOF>

	{ 	
		PrintWriter writer = new PrintWriter("G1.txt", "UTF-8");
		for(Specification s : listOperators)
			writer.println(s); 
		writer.close();
	}
}

Specification Declaration() :
{
	Token id;
	Specification description;
}
{
	id = <ID>
	description = Description()
	{ 	
		description.setName(id.image);
		return description; 
	}
}

Specification Description() :
{
	Token type;
	Specification specifications;
}
{
	( 
		type = <PRIMARY>
		specifications = SpecificationsPrimaire()
		{ return specifications; }
	) |
	(
		type = <UNARY>
		specifications = SpecificationsUnaire()
		{ return specifications; }
	) |
	(
		type = <BINARY>
		specifications = SpecificationsBinaire()
		{ return specifications; }
	)
}

SpecificationPrimaire SpecificationsPrimaire() :
{
	Token regex;
}
{
	regex = <REGEX>
	{ return new SpecificationPrimaire("", regex.image); }
}

SpecificationUnaire SpecificationsUnaire() :
{
	Token left, right;
}
{
	left = <STRING>
	right = <STRING>
	{ return new SpecificationUnaire("", left.image, right.image); }
}

SpecificationBinaire SpecificationsBinaire() :
{
	Token operator;
	Token priority;
}
{
	operator = <STRING>
	priority = <INTEGER>
	{ return new SpecificationBinaire("", operator.image, Integer.parseInt(priority.image)); }
}


